import express from "express";
import cors from "cors";
// ูุง ุญุงุฌุฉ ูุงุณุชูุฑุงุฏ 'body-parser' ุจุนุฏ ุงูุขู
import dotenv from "dotenv";
import axios from "axios";
import moment from "moment-timezone";

// ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ูู ููู .env
dotenv.config();

const app = express();

// ุชูุนูู CORS ูุฌููุน ุงูููุงูุน
app.use(cors({ origin: "*" }));

// === ุงูุชุนุฏูู ููุง: ุงุณุชุฎุฏุงู ูุญูู ุงูุฌุณู ุงููุฏูุฌ ูู Express ===
// ูุฐุง ูุญู ุงูุซุบุฑุฉ ุงูุฃูููุฉ ููุญุณู ุงูููุฏ
app.use(express.json());

// ุงูุฑุงุจุท ุงูุตุญูุญ ูุทุฑุงุฒ 2.5 Pro ุจุฏูู ูุงุญูุฉ -latest
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent";

// ุงูุญุฏูุฏ ุงูุตุญูุญุฉ ููุทุจูุฉ ุงููุฌุงููุฉ ูุทุฑุงุฒ 2.5 Pro
const QUOTA_LIMITS = {
  RPM: 5,
  TPM: 1000000,
  RPD: 100,
  TPD: 200000000
};

// ุนุฏุงุฏุงุช ุงูุงุณุชุฎุฏุงู
let currentMinuteRequests = 0;
let currentMinuteTokens = 0;
let currentDailyRequests = 0;
let currentDailyTokens = 0;

// ุฃููุงุช ุฅุนุงุฏุฉ ุงูุชุนููู
let lastMinuteReset = moment.utc();
let lastDailyReset = moment.utc().startOf('day');

// ุฏุงูุฉ ูุณุงุนุฏุฉ ูุฅุนุงุฏุฉ ุชุนููู ุงูุนุฏุงุฏุงุช
function resetAndRefreshQuotas() {
  const now = moment.utc();

  if (now.diff(lastMinuteReset, 'seconds') >= 60) {
    currentMinuteRequests = 0;
    currentMinuteTokens = 0;
    lastMinuteReset = now;
  }

  if (now.isAfter(lastDailyReset.clone().endOf('day'))) {
    currentDailyRequests = 0;
    currentDailyTokens = 0;
    lastDailyReset = now.startOf('day');
  }
}

// ููุทุฉ ุงูููุงูุฉ ููุนุงูุฌุฉ ุทูุจุงุช Gemini
app.post("/api/gemini", async (req, res) => {
  const { prompt } = req.body;

  if (!prompt) {
    return res.status(400).json({ error: "Prompt ูุทููุจ.", type: "missing_prompt" });
  }

  resetAndRefreshQuotas();

  if (currentMinuteRequests >= QUOTA_LIMITS.RPM) {
    return res.status(429).json({
      error: "ููุฏ ุชุฌุงูุฒุช ุงูุญุฏ ุงููุณููุญ ุจู ูู ุงูุทูุจุงุช ูู ุงูุฏูููุฉ.",
      type: "minute_requests_exceeded"
    });
  }

  if (currentDailyRequests >= QUOTA_LIMITS.RPD) {
    return res.status(429).json({
      error: "ููุฏ ุชุฌุงูุฒุช ุงูุญุฏ ุงููููู ุงููุณููุญ ุจู ูู ุงูุทูุจุงุช.",
      type: "daily_requests_exceeded"
    });
  }

  try {
    const response = await axios.post(
      `${GEMINI_API_URL}?key=${process.env.GEMINI_API_KEY}`,
      {
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ]
      },
      {
        headers: {
          "Content-Type": "application/json"
        }
      }
    );

    const result = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "ูุง ููุฌุฏ ุฑุฏ ูู Gemini.";

    const promptTokenCount = response.data?.usageMetadata?.promptTokenCount || 0;
    const candidatesTokenCount = response.data?.usageMetadata?.candidatesTokenCount || 0;
    const totalTokensUsed = promptTokenCount + candidatesTokenCount;

    currentMinuteRequests++;
    currentMinuteTokens += totalTokensUsed;
    currentDailyRequests++;
    currentDailyTokens += totalTokensUsed;
    
    res.json({ response: result, type: "success" });

  } catch (err) {
    const status = err.response?.status;
    const message = err.response?.data?.error?.message?.toLowerCase() || "";

    console.error("ุฎุทุฃ ูู ุงูุงุชุตุงู ุจู Gemini:", message || err.message);

    const quotaMessages = [
      "resource has been exhausted",
      "you exceeded your current quota",
      "quota exceeded",
      "the request was blocked due to quota limits",
    ];

    const isQuotaError = status === 429 && quotaMessages.some(m => message.includes(m));

    if (isQuotaError) {
      return res.status(429).json({
        error: "ุชู ุชุฌุงูุฒ ุญุตุฉ Gemini API. ูุฑุฌู ุงููุญุงููุฉ ูุงุญููุง.",
        type: "generic_quota_exceeded"
      });
    }

    res.status(500).json({ error: "ูุดู ุงูุงุชุตุงู ูุน Gemini API ุฃู ุฎุทุฃ ุฏุงุฎูู ูู ุงูุฎุงุฏู.", type: "server_error" });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`โ ุงูุฎุงุฏู ูุนูู ุนูู http://localhost:${PORT}`);
  console.log(`๐ ูุณุชูุฏู ุทุฑุงุฒ: ${GEMINI_API_URL}`);
});
